---Notes---
(1) .git folder contains all the GIT repo information
(2) For a multi level folder (when they added newly), GIT does not show all of them recursively. It only shows the 1st level folder.
For e.g. level1 -> level2 -> level3 (all of them are new folders, git status does not show all the folders, instead they show level1 as not added folder)
(3) For newly added untracked file, git rm command doesn't work as it is not tracking file. It is only useful for untracked files
(4) For ignoring files, .gitignore file is needed. '1' expression per line. We can register 
	- specific file, 
	- folder or 
	- a file pattern (regex) 
(5) origin is the name of the remote reference that points to github. master is name of branch on git repo in github
(6) HEAD and origin/HEAD are pointers to the latest commit on the local and remote branch respectively
(7) Branches are nothing special except for being reference label to the last commit
(8) To resolve merge conflicts, go to master/main branch and use git merge <branchName>
    If it involves same file, git will add (MERGING) as prefix. We need to select the changes
	and eventually use "git commit -am" to add and commit the changes to resolve the merge conflict
(9) For GIT merge, you usually go in master and use: git merge <otherBranchName>
(10) For GIT rebase, you usually go in other branch and use: git rebase <master/main>
(11) By default, GIT stash stashes only tracked files. If there is a new file, git stash would not work
(12) git stash -u will include all the new files (that are not being ignored by .gitignore)
(13) You can use: "git stash pop" instead of 2 commands: git stash apply & git stash drop 
(14) git stash branch does the following:
		- creates a new branch, switches to the new branch
		- applies the stash on the new branch
		- drops the stash
(15) Creating a light weight tag is different than an annotated tag.
(16) When you push the tag, it also pushes the commit associated with that tag

---Configuration---
git config --global user.name "Yusuf Sheikh"
git config --global user.email "sheikh.yusuf@gmail.com"
git config --global core.editor "mate"
git config --global --list 	#List Global Configuration#
git config --global alias.history="log --all --online --decorate --graph"


---Commands---
git clone <URL> 		# Git Clone Command: It clones the project
git status 				# Git status: shows the status of the GIT repository 
git init 				# GIT init: Initializes the GIT repo and creates a folder 	
git commit -am  		# It is inline adding & committing (works only on current files, not new ones)
git ls -files 			# Lists all the files GIT is tracking
git pull origin master	# Pulls the code from the master branch
git reset HEAD <file>	# Puts it back from staging area (committed) to working directory (uncommitted)
(In case of deletion, it unstages the file but does not restore to the working directory)
git checkout -- <file> 	# Discards file changes in the current working directory
git add -A				# Adds and updates working directory including renames and deletions
git update -u			# Updates the index
git show <commitId>		# Shows the details of the commit id
git difftool			# Compares the changes between working directory and staging area
git difftool HEAD		# Compares the changes between working directory and last commit (local repo)
git diff --staged HEAD	# Compares the changes between staging area and last commit (local repo)
git diff -- <fileName>	# Compares the changes of the single file mentioned in fileName
git diff <ref1> <ref2>	# Compares two commits
git diff HEAD HEAD^		# Compares the contents between HEAD and (HEAD-1) 
git diff master origin/master # Compares the contents between local and remote master branch
git branch -a			# Lists all the branches on local and remote
git branch <branchName>	# Creates a new branch on the local GIT repo
git branch -m <name1> <name2> # Renames the branch from name1 to name2
git checkout <branchName> # Moves from current branch to <branchName>
git checkout -b <branchName> # Creates the branch and moves reference to <branchName>
git merge <branchName>	# name of the source branch merged in the current one
git merge <branchName> --no-ff	# Merge the branch without any fast forward
git merge <brancName> -m "commit message" # This preserves the branch as well
git rebase <branch you want to rebase into>
git rebase --abort		# Aborts the GIT rebase
git rebase --continue	# Continues the GIT rebase
git pull --rebase origin master	# Pulls the changes from remote to local and rebases
git fetch 				# Updates the references of the local branch from remote
git stash				# Temporarily stashes (saves) the work in progress files in working directory
git stash apply			# Puts back the stashed changes in its earlier state
git stash list			# Lists all the stashed items
git stash drop			# Drops the stash item
git stash -u			# Stashes all the files (including the untracked files)
git stash drop			# You can use this command in place of git stash apply and git stash drop
git stash save "message"	# Saves the stash with a message
git stash show stash@{id} 	# Shows the stash from the list
git stash apply stash@{id}	# Applies the stash from the list
git stash drop stash@{id}	# Drops the stash from the list
git stash clear				# Clears all the stashes
git stash branch <branchName>
git tag <tagName>		# Creates the tag with the tagName
git tag --list			# Lists all the tags
git tag -a <tagName>	# Annotates and creates a tag
git tag -a <tagName> <commitId>	# Tags a specific GIT commit
git tag -a <tagName> <correct commitId>	# Updating a tag to the appropriate commit id
git push origin master --tags	# Pushes all the tags to the remote branch
git push origin :<tagName>		# Deletes r=the tag from the remote branch

---GIT log---
git log --abbrev -commit					# Abbreviates the commit with short hand commit Id
git log --all --oneline --graph --decorate	# Decorates the commits in one line
git log <commitId1> ... <commitId2>			# Range of commits	
git log --since="3 days ago"				# Shows commits since 3 days ago
mate ~/.gitconfig 		#.gitconfig file contains all the configurations (usually in the user folder)

---Questions---
(Q) git clone command default behavior is to clone with the same name as GIT repo 
	(Ans) git clone <repo> <directory> - this will clone in the other directory
(Q) git clone --bare vs got clone --mirror
(Q) how to display the current branch name in the console of command prompt?

---Links---
https://www.atlassian.com/git/tutorials/setting-up-a-repository/git-clone